import React, {useState, useEffect, useContext} from 'react'
import {Link, Redirect} from 'react-router-dom'
import useFetch from 'customHooks/useFetch'
import useLocalStorage from 'customHooks/useLocalStorage'
import {CurentUserContext} from 'contexts/curentUserContaxet'
import BackendErrorMessages from 'pages/autentification/components/BackendErrorMessages'

const Autentification = (props) => {
const isLogin = props.location.pathname === '/login'
const pageTitle = isLogin ? 'Войти' : 'Зарегистрироваться'
const descriptionLink = isLogin ? '/registration' : '/login'
const descriptionText = isLogin ? 'Нужен акаунт?' : 'Есть акаунт?'
const apiUrl = isLogin ? '/users/login' : '/users'

const [email, setEmail] = useState('')
const [password, setPassword] = useState('')
const [username, setUserName] = useState('')
const [succesfullSubmit, setSuccesfullSubmit] = useState(false)
const [{isloading, response, error}, doFetch] = useFetch(apiUrl)
const [, setToken] = useLocalStorage('token')
const [curentUser, setCurrentUserState] = useContext(CurentUserContext)
console.log('Curent User', curentUser);

function submitHandler (e) {
  e.preventDefault()
  
  const user = isLogin ? {email, password} : {email, password, username}
  doFetch({
    method: "post",
    data:{
      user
    }
  })
}
  

useEffect(()=>{
  
  if(!response){
    return
  }
  setToken(response.user.token)
  setSuccesfullSubmit(true)
  setCurrentUserState(state => ({
    ...state,
    isLoggedIn: true,
    isLoading: false,
    currentUser: response.user

  }))
}, [response, setToken,setCurrentUserState])

if(succesfullSubmit){
  return <Redirect to='/'/>
}

  return (
    <div className="auth-page">
      
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">{pageTitle}</h1>
            <p className="text-xs-center">
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            <form onSubmit={submitHandler}>
              {error && <BackendErrorMessages backendErrors={error.errors}/>}
              <fieldset>
                {
                  !isLogin && 
                  <fieldset className="form-group">
                    <input
                      type="text"
                      className="form-control form-control-lg"
                      autoComplete="on"
                      placeholder="Username"
                      value= {username}
                      onChange={e => {
                          setUserName(e.target.value)
                      }}
                    />
                  </fieldset>
                }
                <fieldset className="form-group">
                  <input
                    type="email"
                    className="form-control form-control-lg"
                    autoComplete="on"
                    placeholder="Email"
                    value= {email}
                    onChange={e => {
                        setEmail(e.target.value)
                    }}
                  />
                </fieldset>
                <fieldset className="form-group">
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    placeholder="Password"
                    autoComplete="on"
                    value= {password}
                    onChange={e => {
                        setPassword(e.target.value)
                    }}
                  />
                </fieldset>
                <button
                  className="btn btn-lg btn-primary pull-xs-right"
                  type="submit"
                  disabled={isloading}
                >
                  {pageTitle}
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Autentification
