import {useState, useEffect, useCallback} from 'react'
import axios from 'axios'
import useLocalStorage from 'customHooks/useLocalStorage'

export default (url) => {
    const baseUrl = 'https://conduit.productionready.io/api'
    const [isloading, setIsloading] = useState(false)
    const [response, setResponse] = useState(null)
    const [error, setError] = useState(null)
    const [options, setOptions] = useState({})
    const [token] = useLocalStorage('token') 
    

    const doFetch = useCallback(
      (options = {}) => {
        setOptions(options)
        setIsloading(true)
    }, []) 
    
    useEffect(()=>{
      let skipGetResponseAfterDestroy = false
      const requestOptions = {
        ...options,
        ...{
          headers: {
            autorization: token ? `Token ${token}` : ''
          }
        }
      }
        if(!isloading){
          return
        }
        axios(baseUrl + url, requestOptions).then(res=> {
          if(!skipGetResponseAfterDestroy){
            setIsloading(false)
            setResponse(res.data)
          }
          
        }).catch(e => {
          if(!skipGetResponseAfterDestroy){
            setIsloading(false)
            setError(e.response.data)
          }
          
        })
      }, [isloading, options, url, token])

    return [{isloading, response, error}, doFetch]
}